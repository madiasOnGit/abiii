Description: Template to create destination php Web App demo
Parameters: 
  DBUser: 
    Type: String
  DBPass:
    Type: String
  OperatorEMail:
    Type: String

Resources:
  cloudVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.30.0.0/16
      Tags:
        - Key: Name
          Value: !Join [_, [!Ref 'AWS::StackName', VPC]]
  
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref cloudVPC
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      CidrBlock: 10.30.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [_, [!Ref 'AWS::StackName', PublicSubnet1]]
  
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref cloudVPC
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      CidrBlock: 10.30.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [_, [!Ref 'AWS::StackName', PublicSubnet2]]
  
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      VpcId: !Ref cloudVPC
      CidrBlock: 10.30.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [_, [!Ref 'AWS::StackName', PrivateSubnet1]]
 
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      VpcId: !Ref cloudVPC
      CidrBlock: 10.30.3.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [_, [!Ref 'AWS::StackName', PrivateSubnet2]]

  DBSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      VpcId: !Ref cloudVPC
      CidrBlock: 10.30.4.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [_, [!Ref 'AWS::StackName', DBSubnet1]]

  DBSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      VpcId: !Ref cloudVPC
      CidrBlock: 10.30.5.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [_, [!Ref 'AWS::StackName', DBSubnet2]]

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Join [_, [!Ref 'AWS::StackName', IGW]]
  
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref cloudVPC
      InternetGatewayId: !Ref InternetGateway
  
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref cloudVPC

  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  SecurityGroupHTTPALB:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: HTTPSgALB
      GroupDescription: HTTP(S)
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      VpcId: !Ref cloudVPC
      Tags:
        - Key: Name
          Value: HTTPSgALB

  APPSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: APPSg
      GroupDescription: HTTP(S)
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref SecurityGroupHTTPALB
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          SourceSecurityGroupId: !Ref SecurityGroupHTTPALB
      VpcId: !Ref cloudVPC
      Tags:
        - Key: Name
          Value: APPSg

  MySQLSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: DBSg
      VpcId: !Ref cloudVPC
      GroupDescription: Marker security group for MySQL server.
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref APPSecurityGroup
      Tags:
        - Key: Name
          Value: DBSg
  
  NotificationTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      Subscription:
        - Endpoint: !Ref OperatorEMail
          Protocol: email

  ServerGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier:        
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '1'
      HealthCheckGracePeriod: 300
      MaxInstanceLifetime: 2592000
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      NotificationConfiguration:
        TopicARN: !Ref NotificationTopic
        NotificationTypes:
          - 'autoscaling:EC2_INSTANCE_LAUNCH'
          - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
          - 'autoscaling:EC2_INSTANCE_TERMINATE'
          - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
  
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    DependsOn: 'DBInstance'
    Properties:
      ImageId: ami-014ce76919b528bff
      InstanceType: t2.micro
      SecurityGroups:
        - !Ref APPSecurityGroup
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            # Install dependecies
            sudo yum update -y
            sudo yum install php php-mysql git -y

            echo "<?php \$dbserver='${DBInstance.Endpoint.Address}'; \$u='${DBUser}'; \$p='${DBPass}'; \$database='OctankDB'; ?>" > db.php
            sudo mv db.php /var/www/html/

            # Clone repository
            git clone https://github.com/madiasOnGit/abiii.git
            sudo mv abiii/cloudApp/app/* /var/www/html/
            sudo mv abiii/cloudApp/css/ /var/www/html/
            sudo mv abiii/cloudApp/image/ /var/www/html/

            # Start apache
            sudo service httpd start
            chkconfig httpd on
      KeyName: devKeyIreland

  WebServerScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ServerGroup
      Cooldown: '60'
      ScalingAdjustment: '1'

  WebServerScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ServerGroup
      Cooldown: '60'
      ScalingAdjustment: '-1'

  CPUAlarmHigh:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-up if CPU > 90% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '90'
      AlarmActions:
        - !Ref WebServerScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref ServerGroup
      ComparisonOperator: GreaterThanThreshold

  CPUAlarmLow:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Scale-down if CPU < 70% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '70'
      AlarmActions:
        - !Ref WebServerScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref ServerGroup
      ComparisonOperator: LessThanThreshold

  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: tg-cloudapp
      VpcId: !Ref cloudVPC
      Port: 80
      Protocol: HTTP
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 2
      HealthCheckIntervalSeconds: 5

  ALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    DependsOn:
      - ALBTargetGroup
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Name: alb-cloudapp
      SecurityGroups:
        - !Ref SecurityGroupHTTPALB

  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP


  DBParamGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: Default parameter group
      Family: MySQL8.0
      Parameters:
        character_set_database: utf8
        character_set_client: utf8
        character_set_connection: utf8
        character_set_results: utf8
        character_set_server: utf8
        skip-character-set-client-handshake: 'TRUE'

  DBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Database subnets for RDS
      SubnetIds:
        - !Ref DBSubnet1
        - !Ref DBSubnet2

  DBInstance:
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: Snapshot
    Properties:
      DBInstanceClass: db.t2.micro
      AllocatedStorage: '5'
      Engine: MySQL
      MultiAZ: 'false'
      EngineVersion: 8.0.20
      MasterUsername: !Ref DBUser
      MasterUserPassword: !Ref DBPass
      BackupRetentionPeriod: '35'
      DBParameterGroupName: !Ref DBParamGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBSnapshotIdentifier: !Ref 'AWS::NoValue'
      PreferredBackupWindow: '19:00-19:30'
      PreferredMaintenanceWindow: 'sat:20:00-sat:20:30'
      VPCSecurityGroups:
        - !Ref MySQLSecurityGroup

## Outputs ##
Outputs:
  ALBDNS:
    Description: URL to access the application
    Value: !GetAtt ALB.DNSName
    Export:
      Name: DestAppURL